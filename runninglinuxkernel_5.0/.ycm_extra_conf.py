# Generated by YCM Generator at 2021-03-23 21:31:03.961604

# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import os
import ycm_core

flags = [
    '-x',
    'c',
    '-DBUILDING_ACPICA',
    '-DBUILD_STR(s)=#s',
    '-DBUILD_VDSO',
    '-DCONFIG_AS_AVX2=1',
    '-DCONFIG_AS_AVX512=1',
    '-DCONFIG_AS_AVX=1',
    '-DCONFIG_AS_CFI=1',
    '-DCONFIG_AS_CFI_SECTIONS=1',
    '-DCONFIG_AS_CFI_SIGNAL_FRAME=1',
    '-DCONFIG_AS_FXSAVEQ=1',
    '-DCONFIG_AS_SHA1_NI=1',
    '-DCONFIG_AS_SHA256_NI=1',
    '-DCONFIG_AS_SSSE3=1',
    '-DDEBUG',
    '-DDISABLE_BRANCH_PROFILING',
    '-DKBUILD_BASENAME="8250_core"',
    '-DKBUILD_MODNAME="8250"',
    '-DLINKER_SCRIPT',
    '-DMODULE',
    '-DSVGA_MODE=NORMAL_VGA',
    '-D_LINUX',
    '-D_SETUP',
    '-D_WAKEUP',
    '-D__ASSEMBLY__',
    '-D__EXPORTED_HEADERS__',
    '-D__KERNEL__',
    '-I./arch//include/uapi',
    '-I./arch/x86/boot',
    '-I./arch/x86/include',
    '-I./arch/x86/include/generated',
    '-I./arch/x86/include/generated/uapi',
    '-I./arch/x86/include/uapi',
    '-I./arch/x86/realmode/rm',
    '-I./include',
    '-I./include/generated/uapi',
    '-I./include/uapi',
    '-I./security/selinux',
    '-I./security/selinux/include',
    '-I./tools/include',
    '-I/home/rlk/rlk/runninglinuxkernel_5.0/tools/arch/x86/include/uapi',
    '-I/home/rlk/rlk/runninglinuxkernel_5.0/tools/include',
    '-I/home/rlk/rlk/runninglinuxkernel_5.0/tools/objtool/arch/x86/include',
    '-Iarch/x86/kernel/../include/asm/trace',
    '-Iarch/x86/mm/../include/asm/trace',
    '-Idrivers/acpi',
    '-Idrivers/base/regmap',
    '-Ifs/nfs',
    '-Ikernel/trace',
    '-Iscripts/kconfig',
    '-Wall',
    '-Wbad-function-cast',
    '-Wdeclaration-after-statement',
    '-Werror',
    '-Werror-implicit-function-declaration',
    '-Werror=date-time',
    '-Werror=designated-init',
    '-Werror=implicit-int',
    '-Werror=incompatible-pointer-types',
    '-Werror=strict-prototypes',
    '-Wformat',
    '-Wformat-security',
    '-Wformat-y2k',
    '-Wframe-larger-than=4096',
    '-Winit-self',
    '-Wmissing-declarations',
    '-Wmissing-prototypes',
    '-Wnested-externs',
    '-Wno-address-of-packed-member',
    '-Wno-format-overflow',
    '-Wno-format-security',
    '-Wno-format-truncation',
    '-Wno-frame-address',
    '-Wno-gnu',
    '-Wno-int-in-bool-context',
    '-Wno-maybe-uninitialized',
    '-Wno-override-init',
    '-Wno-packed',
    '-Wno-packed-not-aligned',
    '-Wno-pointer-sign',
    '-Wno-sign-compare',
    '-Wno-stringop-truncation',
    '-Wno-switch-default',
    '-Wno-switch-enum',
    '-Wno-system-headers',
    '-Wno-trigraphs',
    '-Wno-unused-but-set-variable',
    '-Wno-unused-const-variable',
    '-Wno-unused-function',
    '-Wold-style-definition',
    '-Wpacked',
    '-Wredundant-decls',
    '-Wshadow',
    '-Wstrict-aliasing=3',
    '-Wstrict-prototypes',
    '-Wswitch-default',
    '-Wswitch-enum',
    '-Wundef',
    '-Wvla',
    '-Wwrite-strings',
    '-isystem',
    '-m64',
    '-nostdinc',
    '-std=gnu89',
    '-include', './include/linux/compiler_types.h',
    '-include', './include/linux/kconfig.h',
    '-include', 'include/generated/autoconf.h',
]


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
compilation_database_folder = ''

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.C', '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.H', '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }

def Settings( **kwargs ):
    language = kwargs[ 'language' ]
    if language == 'cfamily':
        return {
            'flags': flags
        }

    return {}
